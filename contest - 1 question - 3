#include <bits/stdc++.h>
using namespace std;

struct Node {
    int val;
    Node *left, *right;
    Node(int v) : val(v), left(NULL), right(NULL) {}
};

typedef struct Node* NODE;

Node* insert(Node* root, int val) {
    if (!root) return new Node(val);
    if (val < root->val)
        root->left = insert(root->left, val);
    else
        root->right = insert(root->right, val);
    return root;
}

int findLCA(Node* root, int n1, int n2) {
    // TODO
    
    NODE curr = root;
    
    NODE leftnode, rightnode;
    while(curr){
        int l = curr->val;
        int r = curr->val;
        
        if(n1 <= l && n2 >= r){
            return curr->val;
        }
        
        else if(n1 <= l && n2 <= r){
            curr = curr->left;
        }
        else if(n1 >= l && n2 >= r){
            curr = curr->right;
        }
        
        
        
    }
    
    return -1;
}

int main() {
    int n;
    cin >> n;
    Node* root = NULL;
    for (int i = 0; i < n; i++) {
        int v;
        cin >> v;
        root = insert(root, v);
    }
    int g, a;
    cin >> g >> a;
    
    int l = min(g, a);
    int r = max(g, a);

    cout << findLCA(root, l, r) << endl;
}
